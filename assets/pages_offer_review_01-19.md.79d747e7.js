import{_ as a,c as s,o as e,a as l}from"./app.ff7114bc.js";const _=JSON.parse('{"title":"01-19","description":"","frontmatter":{"isTimeLine":false,"title":"01-19","date":"2021-01-19T00:00:00.000Z","tags":["备战春秋","复习自查"]},"headers":[{"level":2,"title":"模拟实现","slug":"模拟实现","link":"#模拟实现","children":[]},{"level":2,"title":"理论","slug":"理论","link":"#理论","children":[]},{"level":2,"title":"事件相关","slug":"事件相关","link":"#事件相关","children":[]},{"level":2,"title":"朋友们的回答","slug":"朋友们的回答","link":"#朋友们的回答","children":[]}],"relativePath":"pages/offer/review/01-19.md","lastUpdated":1678347021000}'),n={name:"pages/offer/review/01-19.md"},t=l(`<h1 id="_01-19" tabindex="-1">01-19 <a class="header-anchor" href="#_01-19" aria-hidden="true">#</a></h1><h2 id="模拟实现" tabindex="-1">模拟实现 <a class="header-anchor" href="#模拟实现" aria-hidden="true">#</a></h2><ol><li>实现Promise.all</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 要求：必须等全部都resolved或者reject才返回</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 有一个reject就走catch</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 返回数组:（包括每一个resolved/reject的内容）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 返回的数组结果对应的顺序与传入的promise顺序一致</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PromiseAll</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>简单实现一个深拷贝</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 对象只考虑普通对象与数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 有兴趣自己探究一 如下特殊场景如何满足</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 特殊场景 循环引用/Date/Regex/Symbol/函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deepClone</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>ES5实现函数的继承</li></ol><h2 id="理论" tabindex="-1">理论 <a class="header-anchor" href="#理论" aria-hidden="true">#</a></h2><ol><li>几种常见for循环的区别与不足之处 (for,for of,for in ,foreach)</li><li>什么是深拷贝，什么是浅拷贝？</li><li>generator与async/await有什么关系</li><li>如何实现generator的自动调用</li><li>new一个对象做了什么（讲述一下new的原理）</li></ol><h2 id="事件相关" tabindex="-1">事件相关 <a class="header-anchor" href="#事件相关" aria-hidden="true">#</a></h2><ol><li>什么是事件委托</li><li>事件的回调函数 e.target与.currentTarget分别指向谁</li></ol><h2 id="朋友们的回答" tabindex="-1">朋友们的回答 <a class="header-anchor" href="#朋友们的回答" aria-hidden="true">#</a></h2><ul><li><a href="https://juejin.cn/post/6919313083500494856/" target="_blank" rel="noreferrer">tl</a></li><li><a href="https://www.cnblogs.com/dark-duck/p/14305622.html" target="_blank" rel="noreferrer">tdk</a></li></ul>`,13),i=[t];function o(r,p,c,d,h,f){return e(),s("div",null,i)}const u=a(n,[["render",o]]);export{_ as __pageData,u as default};
