import{_ as s,c as e,o as a,a as l}from"./app.fb687074.js";const h=JSON.parse('{"title":"shopee-供应链","description":"","frontmatter":{"isTimeLine":true,"title":"shopee-供应链","date":"2020-10-23T00:00:00.000Z","tags":["备战春秋","2020秋招"],"categories":["备战春秋"]},"headers":[{"level":2,"title":"一面","slug":"一面","link":"#一面","children":[{"level":3,"title":"代码题","slug":"代码题","link":"#代码题","children":[]},{"level":3,"title":"性能优化","slug":"性能优化","link":"#性能优化","children":[]},{"level":3,"title":"JS","slug":"js","link":"#js","children":[]},{"level":3,"title":"Vue","slug":"vue","link":"#vue","children":[]},{"level":3,"title":"其它","slug":"其它","link":"#其它","children":[]}]}],"relativePath":"pages/offer/sum-interview/20-autumn/shopee.md","lastUpdated":1678974252000}'),n={name:"pages/offer/sum-interview/20-autumn/shopee.md"},o=l(`<h1 id="shopee-供应链" tabindex="-1">shopee-供应链 <a class="header-anchor" href="#shopee-供应链" aria-hidden="true">#</a></h1><h2 id="一面" tabindex="-1">一面 <a class="header-anchor" href="#一面" aria-hidden="true">#</a></h2><h3 id="代码题" tabindex="-1">代码题 <a class="header-anchor" href="#代码题" aria-hidden="true">#</a></h3><ol><li>页面几乎同时发出请求，向同一个接口发出的请求，模块1是<code>api/list?id=1</code>,2是<code>api/list?id=2</code>，n是<code>api/list?id=n</code>，针对这种情况，设计一个request方法，将多次请求合并，智慧向后端发出一个请求<code>api/list?id=1,2,...n</code></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">requestUser</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">requestUser</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">requestUser</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 我感觉这题出得有问题，用了await异步代码变同步，后两个执行 要等第一个执行完才开始</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 我觉得 当时面试官的意思是这样，因为我是按下面的理解给的解法</span></span>
<span class="line"><span style="color:#82AAFF;">requestUser</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">res1</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">requestUser</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">res2</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">requestUser</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">res3</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>setTimeout(fn1,0),process.nextTick(fn2),Promise.resolve().then().then(fn3) 执行顺序</li><li>setTimeout(fn1,0),setImmediate(fn2)谁先执行</li></ol><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-hidden="true">#</a></h3><ol><li>如何计算/查看页面首次可交互时间</li><li>如何优化静态资源加载，有哪些方案</li></ol><h3 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-hidden="true">#</a></h3><ol><li>js的异步机制</li><li>说一下event loop</li><li>有哪些微任务</li><li>process.nextTick是微任务吗</li><li>什么是提升，有什么作用</li><li>什么是暂时性死区</li><li>如果我在声明前使用let的变量会有什么问题</li></ol><h3 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-hidden="true">#</a></h3><ol><li>数据双向绑定实现原理</li><li>如何监听的数组的变动</li><li>事件绑定实现的原理</li></ol><h3 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-hidden="true">#</a></h3><ol><li>对MVVM，MVC，MVP架构的认识</li></ol>`,14),t=[o];function p(r,i,c,A,C,d){return a(),e("div",null,t)}const D=s(n,[["render",p]]);export{h as __pageData,D as default};
