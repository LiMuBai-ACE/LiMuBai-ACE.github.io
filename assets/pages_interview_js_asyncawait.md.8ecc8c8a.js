import{_ as a,c as e,o as i,a as t}from"./app.471d11cf.js";const p=JSON.parse('{"title":"async及await的特点，它们的优点和缺点分别是什么？await原理是什么？","description":"","frontmatter":{"isTimeLine":true,"title":"async及await的特点，它们的优点和缺点分别是什么？await原理是什么？","date":"2020-04-14T00:00:00.000Z","tags":["面试","javascript"],"categories":["面试"]},"headers":[{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":2,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]}],"relativePath":"pages/interview/js/asyncawait.md","lastUpdated":1678348653000}'),r={name:"pages/interview/js/asyncawait.md"},s=t('<h1 id="async-及-await-的特点-它们的优点和缺点分别是什么-await-原理是什么" tabindex="-1">async 及 await 的特点，它们的优点和缺点分别是什么？await 原理是什么？ <a class="header-anchor" href="#async-及-await-的特点-它们的优点和缺点分别是什么-await-原理是什么" aria-hidden="true">#</a></h1><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h2><ul><li>一个函数如果加上async 那么其返回值是Promise,async 就是将函数返回值使用 Promise.resolve() 进行包裹,和then处理返回值一样</li><li>await只能配合async使用 不能单独使用</li></ul><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-hidden="true">#</a></h2><ul><li>相比于Promise来说优势在于能够写出更加清晰的调用链,并且也能优雅的解决回调地狱的问题</li></ul><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-hidden="true">#</a></h2><ul><li>因为await将异步代码变成了同步代码,如果多个异步之间没有关系,会导致性能降低</li></ul><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-hidden="true">#</a></h2><ul><li>await 就是 generator 加上 Promise 的语法糖，且内部实现了自动执行 generator</li></ul>',9),l=[s];function n(c,d,h,o,_,u){return i(),e("div",null,l)}const m=a(r,[["render",n]]);export{p as __pageData,m as default};
