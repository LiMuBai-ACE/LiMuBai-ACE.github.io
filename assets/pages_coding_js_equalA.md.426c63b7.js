import{_ as s,c as a,o as n,a as l}from"./app.ff7114bc.js";const C=JSON.parse('{"title":"如何实现变量a同时等于多个值","description":"","frontmatter":{"sidebar":{"title":"简单-a同时等于多个值","step":7},"isTimeLine":true,"title":"如何实现变量a同时等于多个值","date":"2020-09-11T00:00:00.000Z","tags":["手撕代码","javascript"],"categories":["手撕代码"]},"headers":[{"level":2,"title":"定义[ToPrimitive]","slug":"定义-toprimitive","link":"#定义-toprimitive","children":[]},{"level":2,"title":"定义valueOf","slug":"定义valueof","link":"#定义valueof","children":[]},{"level":2,"title":"定义toString","slug":"定义tostring","link":"#定义tostring","children":[]}],"relativePath":"pages/coding/js/equalA.md","lastUpdated":1678347021000}'),p={name:"pages/coding/js/equalA.md"},e=l(`<h1 id="如何实现变量a同时等于多个值" tabindex="-1">如何实现变量a同时等于多个值 <a class="header-anchor" href="#如何实现变量a同时等于多个值" aria-hidden="true">#</a></h1><p>通过重新定义对象的隐式转换行为实现</p><p>如对隐式转换不了解，推荐阅读<a href="./../../bigWeb/js/typeConvert.html">类型转换</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">yes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="定义-toprimitive" tabindex="-1">定义[ToPrimitive] <a class="header-anchor" href="#定义-toprimitive" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">v</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    [Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toPrimitive]</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="定义valueof" tabindex="-1">定义valueOf <a class="header-anchor" href="#定义valueof" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">v</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">valueOf</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="定义tostring" tabindex="-1">定义toString <a class="header-anchor" href="#定义tostring" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">v</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">toString</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,10),o=[e];function t(c,r,i,F,D,y){return n(),a("div",null,o)}const A=s(p,[["render",t]]);export{C as __pageData,A as default};
