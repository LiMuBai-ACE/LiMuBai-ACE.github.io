import{_ as e,c as t,o as a,a as l}from"./app.ff7114bc.js";const p=JSON.parse('{"title":"什么是提升？什么是暂时性死区？var、let及const区别？","description":"","frontmatter":{"isTimeLine":true,"title":"什么是提升？什么是暂时性死区？var、let及const区别？","date":"2020-03-10T00:00:00.000Z","tags":["面试","其它"],"categories":["面试"]},"headers":[{"level":2,"title":"什么是提升？","slug":"什么是提升","link":"#什么是提升","children":[]},{"level":2,"title":"什么是暂时性死区？","slug":"什么是暂时性死区","link":"#什么是暂时性死区","children":[]},{"level":2,"title":"var、let 及 const 区别？","slug":"var、let-及-const-区别","link":"#var、let-及-const-区别","children":[]}],"relativePath":"pages/interview/other/promote.md","lastUpdated":1678347021000}'),i={name:"pages/interview/other/promote.md"},r=l('<h1 id="什么是提升-什么是暂时性死区-var、let-及-const-区别" tabindex="-1">什么是提升？什么是暂时性死区？var、let 及 const 区别？ <a class="header-anchor" href="#什么是提升-什么是暂时性死区-var、let-及-const-区别" aria-hidden="true">#</a></h1><h2 id="什么是提升" tabindex="-1">什么是提升？ <a class="header-anchor" href="#什么是提升" aria-hidden="true">#</a></h2><ul><li>使用 var 声明的变量会被提升到作用域的顶部</li><li>函数也会被提升，并且优先于变量提升。</li><li>提升存在的根本原因就是为了解决函数间互相调用的情况</li></ul><h2 id="什么是暂时性死区" tabindex="-1">什么是暂时性死区？ <a class="header-anchor" href="#什么是暂时性死区" aria-hidden="true">#</a></h2><ul><li>不能在声明前就使用变量</li></ul><h2 id="var、let-及-const-区别" tabindex="-1">var、let 及 const 区别？ <a class="header-anchor" href="#var、let-及-const-区别" aria-hidden="true">#</a></h2><ul><li>全局作用域下: <ul><li>使用 var 声明的变量会被挂载到window上</li><li>使用 let 和 const 声明的变量，不会被挂载到 window 上</li></ul></li><li>var定义变量会提升,let,const不会</li><li>同一作用域中var允许重复声明,let,const不可以</li><li>const 声明必须赋初值,且声明后不能改变</li></ul>',7),n=[r];function s(o,c,d,h,_,v){return a(),t("div",null,n)}const m=e(i,[["render",s]]);export{p as __pageData,m as default};
